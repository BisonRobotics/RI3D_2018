// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4607.Greenhorns2018;

import org.usfirst.frc4607.Greenhorns2018.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc4607.Greenhorns2018.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whenPressed(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton intakeInButton;
    public JoystickButton intakeOutButton;
    public JoystickButton cLimberUpButton;
    public JoystickButton climberDownButton;
    public JoystickButton elevatorUpButton;
    public JoystickButton elevatorDownButton;
    public Joystick driver;
    public Joystick driver2; // for tank driving
    public Joystick operator; // for functions of bot

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    	// There are two joysticks for using tank drive if desired. Command control buttons are on the driver joystick.
        driver = new Joystick(0);
        driver2 = new Joystick(2);
        operator = new Joystick(1);
        
        // Set up buttons and assign commands to them
        elevatorDownButton = new JoystickButton(operator, 4);
        elevatorDownButton.whenPressed(new ElevatorDown());
        elevatorUpButton = new JoystickButton(operator, 6);
        elevatorUpButton.whenPressed(new ElevatorUp());
        climberDownButton = new JoystickButton(operator, 3);
        climberDownButton.whenPressed(new ClimberDown());
        cLimberUpButton = new JoystickButton(operator, 5);
        cLimberUpButton.whenPressed(new ClimberUp());
        intakeOutButton = new JoystickButton(driver, 2);
        intakeOutButton.whenPressed(new IntakeOut());
        intakeInButton = new JoystickButton(driver, 1);
        intakeInButton.whenPressed(new IntakeIn());

        // SmartDashboard Buttons
//        SmartDashboard.putData("Autonomous Command", new AutonomousCommand(3));
//        SmartDashboard.putData("Elevator Down", new ElevatorDown());
//        SmartDashboard.putData("Elevator Up", new ElevatorUp());
//        SmartDashboard.putData("Intake In", new IntakeIn());
//        SmartDashboard.putData("Intake Out", new IntakeOut());
//        SmartDashboard.putData("Climber Up", new ClimberUp());
//        SmartDashboard.putData("Climber Down", new ClimberDown());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverRight() {
        return driver;
    }
    
    public Joystick getDriverLeft() {
        return driver2;
    }
    
    public Joystick getOperator() {
    	return operator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

